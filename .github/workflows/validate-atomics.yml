name: validate-atomics

on:
  pull_request:
    branches:
      - master

jobs:
  validate-atomics:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - name: setup python3.11
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.11.2"
          cache: "poetry"

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: validate the format of atomics tests against the spec
        run: poetry run python runner.py validate
        working-directory: atomic_red_team
        env:
          PYTHONPATH: ${{ github.workspace }}

  upload:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - name: setup python3.11
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.11.2"
          cache: "poetry"
      - uses: actions/github-script@v7
        id: get_pr_number
        with:
          script: |
            if (context.issue.number) {
              // Return issue number if present
              return context.issue.number;
            } else {
              // Otherwise return issue number from commit
              return (
                await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  commit_sha: context.sha,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              ).data[0].number;
            }
          result-encoding: string
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      - name: save labels and reviewers into a file.
        run: |
          poetry run python runner.py generate-labels --pr '${{steps.get_pr_number.outputs.result}}' --token ${{ secrets.GITHUB_TOKEN }}
        working-directory: atomic_red_team
        env:
          PYTHONPATH: ${{ github.workspace }}

      - uses: actions/upload-artifact@v4
        with:
          name: labels.json
          path: atomic_red_team/pr/

      - uses: actions/upload-artifact@v4
        with:
          name: changedfiles.json
          path: atomic_red_team/pr/

  run-atomics:
    name: Install Invoke-Atomic
    needs:
      - upload
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: changedfiles.json

      - name: cat changedfiles.json
        run: cat changedfiles.json

      - name: Install Invoke-AtomicRedTeam
        shell: pwsh
        run: |
          IEX (IWR 'https://raw.githubusercontent.com/redcanaryco/master/install-atomicredteam.ps1' -UseBasicParsing);
          Install-AtomicRedTeam -Force
          if($error.contains("Installation of AtomicRedTeam Failed")){
            exit 1
          }
          IEX (IWR 'https://raw.githubusercontent.com/redcanaryco/master/install-atomicsfolder.ps1' -UseBasicParsing);
          Install-AtomicsFolder -RepoOwner ${{ github.event.pull_request.head.repo.full_name }} -Branch ${{ github.event.pull_request.head.ref }} -Force
          Invoke-AtomicTest All -ShowDetailsBrief
